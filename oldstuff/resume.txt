*F. Dennis Periquet*
*/dperique@yahoo.com/*
------------------------------------------------------------------------

*Skills Summary*

    * Excellent written and verbal communication skills, ability to work
      independently as well as on a team 
    * Ability to quickly learn new technology and delivery large amount
      of work in short periods of time (start-up mentality) 
    * One of my specialties is significantly improving one's ability to
      test, debug, and troubleshoot networking products 
    * Significant expertise is test automation, routing protocol
      simulation, and network troubleshooting/debugging
    * Owner and inventor of Network Protocol Simulation Tool (NetPST)
      <http://home.comcast.net/%7Edperique/AUsersGuide.html#A%20Brief%20Description%20of%20NetPST>
      used for router protocol simulation (RIP, OSPFv2, BGP4), SIP/MGCP
      protocol simulation, etc.,  network troubleshooting, and test
      automation

*Education*

    * /MBA, NH College, /Finance/Investments;earned in 2 years while
      working full-time; GPA 3.9/4.0, Aug 1993.
    * /BS University of Colorado, Colo Springs, CO,/ Computer Science
      Major, Electrical Eng/Math minor; awarded "Outstanding Senior of
      the Year" for graduating  top of class; GPA 3.6/4.0, 1988

*Software Engineering Tools:*

    * *UNIX Solaris/Linux*: very proficient in gdb (debugger), cvs
      (source  code management like sccs), ClearCase, vi, emacs, GNU
      compilers, cscope,  insure++ and Purify for memory leak detection
    * *Windows: *Some training in Visual C++.NET with IIS under Windows
      XP Professional, Visual C++, Visual J++
    * *DECset tools for VMS: *Language Sensitive  Editors, Source Code
      Analyzers, VMS Debugger (DECset)

*OS Experience:  *UNIX: Linux (used Redhat extensively, currently using
Fedora Core 6), Solaris, SunOS; VxWorks, VMS; Windows XP Professional,
2000, NT, 95, MS-DOS; at my last two jobs, I was a group Linux
consultant due to my extensive experience.  Apple OSX 10.4.x

*Programming Languages & Software Development: *C, C++, extensive socket
level programming using Berkeley sockets with state machine design and
multi-threaded applications for networking, Java, Smalltalk, Object
Oriented Methodology (OMT), BASIC, BLISS, Assembly for Intel, Pascal,
Fortran, Ada, LISP, Modula-2, tcl, Object Oriented tcl (highly
proficient in tcl and object oriented tcl); extended the tcl interpreter
with tcl functions for doing network programming at the scripting
level.  In current job, using Perl extensively for writing automated
test cases.

*Work Experience*

2003 - Present: Juniper Networks, Inc.: Systems Integration and Test
Engineer

System Integration and Test (SIT) of Juniper ERX series (Edge) routers:
Test SIT process was about testing software during the development cycle
so that by the time we handed it to SQA, the software was already at
good quality.  This allowed SQA to focus on more intensive and high
scaled testing.

    * Developed extensive automation for running over 600 testcases on
      two builds on a weekly basis.  These test cases ran 24x7 over
      eight different routers until complete.  The output consisted of:
          o Extensive logs detailing failures (which helped in triaging
            and failure analysis)
          o Reports detailing pass/fail dates and test run history (so
            you determine when a test last passed to pinpoint where
            regressions were introduced)
          o Bug reports which can be modified with detailed information
            as you investigated the bug cause; these same reports were
            fed into a bug reporting tool I wrote so you can automate
            entering bug reports into the Clearquest bug database.
    * Introduced new testcases as needed; given my automation
      background, I could determine if special testcases were conducive
      to automation.  In many cases, I would write both the test and the
      automation infrastructure.  For example, I wrote a test harness to
      facilitate testing high availability (HA) functionality which
      involved running data traffic through the ERX router, simulating a
      crash, and confirming that data traffic still flowed.
    * Ran the tests weekly, processed the results and reported the
      results to the routing protocols group.
    * Helped make decisions on the health of the release based on the
      results of the testing

System Integration and Test of Juniper M Series (Core) routers

    * Developed Perl libraries to facilitate writing of testcases that
      were conducive to structured reporting and automation (the idea is
      to bring what I did for the ERX series SIT testing to the M series
      routers.
    * Wrote testcases to demonstrate the libraries I wrote and to built
      up a set of System Integration Test scripts that can be run on a
      frequent basis to help gauge the stability of the daily builds.
    * Setup demo for customer where there was DHCP server, DHCP client,
      IGMP clients, and video stream using our MX-960 routers.
    * Deployed NetPST software to simulate DHCP server, DHCP client,
      IGMP clients, and video stream using a single Linux PC. 
      Developers use NetPST to send test data traffic for debugging the
      Packet Forwarding Engine software at the unit test level. 
      Eventually, the Multicast team intends to use it in their unit
      testing and for debugging their software.
    * Setup/connect, troubleshoot (rescue malfunctioning routers) for
      the group; troubleshoot buggy software.
    * Incorporated Gigabit Ethernet over copper into our test systems
      (switched from Gigabit Ethernet over fiber) to save money by
      allowing us to buy 10/100/1000 hubs as opposed to fiber switches
      ($50 vs. $2000).  This introduced much more flexibility in our
      testing environment .  For example, it allowed test PCs (e.g.,
      running NetPST) to test Gigabit routers (as opposed to expensive
      fiber equipment); allowed us to connect 100Mb ERX series routers
      to MX-960 routers for interoperability testing.
    * Worked with Agilent Router Tester for testing DHCP Relay scaling
      to identify max number of clients and max number of DHCP clients
      per second; BGP scaling, IGMP scaling, data throughput testing.

2001 - 2002: /Snowshore Networks, Inc.: /Principal SQA Engineer

      SQA testing of Snowshore's N20 and A1 Media Servers (a Media
      Server is a key infrastructure component for VOIP)

      *Accomplishments/Responsibilities:*

          o Development, implementation, and execution of test-plans for:
                + SIP (Session Initiation Protocol) signaling: includes
                  the development of a SIP client simulator for
                  simulating thousands of SIP clients for stress testing
                  (in terms of calls per second, and number of calls) of
                  the Snowshore N20 media server; the SIP state machine
                  was user configurable so that he/she could simulate
                  various behavior of a "misbehaving" SIP client.
                + MGCP (Media Gateway Control Protocol) signaling:
                  includes development of MGCP client simulator used for
                  unit testing of MGCP
                + Security/denial-of-service testing (e.g., ping of
                  death, ping storm, TCP SYN attack, etc.): includes
                  developing utilities for creating these networking
                  simulations (e.g., send fragments of ICMP packets with
                  incorrect offsets to make the IP stack think it
                  received an IP packet that was legal when, in fact, it
                  was too big -- thus causing a crash)
                + SNMP, and IP/Networking testing: this testing involved
                  using Scotty SNMP client software and performing
                  various SNMP set, get, getnext, getbulk, etc.
                  queries.  Wrote utilities for sending ARP, ICMP, RIP,
                  OSPF, TCP packets to the device under test in a highly
                  controlled way to confirm correct functionality of
                  routing table, ARP table and correctly ignoring
                  certain packets.
          o Wrote many test scripts and tools (still in use today)
                + For software developers I wrote scripts to simulate a
                  variable number of SIP clients (from 1 to 500) with
                  variable SIP settings/parameters to help developers
                  reproduce and debug scaling software problems.
                + For the SQA team I wrote scripts used to perform
                  scaling tests that last for days/weeks; the scripts
                  would setup calls and conferences that started and
                  terminated repeatedly at high speed until it was
                  stopped; the purpose was to test how long the N20
                  could continue to operate under high stress conditions.

1999 - 2001: /River Delta Networks, Inc.: /Principal Software Engineer.

    Developed Network Protocol Simulation Tool (NetPST)
    <http://home.attbi.com/%7Edperique/AUsersGuide.html#A%20Brief%20Description%20of%20NetPST>


    NetPST consists of 43,662 lines of C/C++ & 20,678 of tcl/tk
    scripting.   When writing/designing NetPST, I used object oriented
    design to facilitate easy and rapid modification and addition of new
    network simulations.

    The technique used in the NetPST for developing the packet
    encoders/decoders is in the process of being patented (starting with
    provisional patent).  This technique is special in that it allows
    one to add encoders/decoders for protocol fragments very quickly.

    This software is used by development and SQA extensively for unit
    testing, scaling testing, regression testing and debugging of River
    Delta Networks' software.  It can analyze protocols for over 500
    different fragment types & serves as a platform for developing high
    speed simulations for routing protocols.  It includes the ability to
    model protocol FSM (Finite State Machine) behavior, encode and
    decode protocol data traffic, and manage automated test scripts.

    *Accomplishments/Responsibilities:*

        * All design/development/documentation/training for NetPST
        * SQA consulting for application of NetPST including test
          development and automation
        * SQA consulting for development of test plans
        * Wrote automated test scripts for testing routing protocol
          behavior (these scripts serve as examples and training aids
          for future script development)
        * Development of a large set of routing protocol simulations
          based on the NetPST technology.  Any simulations that required
          high speed were optimized at the C/C++ level for maximum
          efficiency.
        * Development of the "Packet Relay" software for relaying
          packets from an Ethernet device to a Sonet device over a UDP
          connection between a PC and a Sonet board.  This software
          (written in C for use with VxWorks) used my "Packet Relay"
          software framework to transform a vendor board into a "Packet
          Relay" device and works in conjunction with NetPST.
        * Created protocol encoders/decoders for the DOCSIS BPI and BPI+
          protocol fragments that helped the CMTS development team test,
          debug, and prepare for DOCSIS 1.0 and 1.1 certification. 
          Spent time working with CMTS development team and successfully
          convinced them to use the NetPST; the result was a significant
          increase in productivity with respect to testing, debugging,
          and troubleshooting.
        * Created protocol encoders/decoders for numerous networking
          protocols per RFCs and drafts
        * Created several protocol simulations per RFCs; this includes
          using the protocol decoders/encoders with FSMs.

    *Simulations:*

        * ARP, RIPv1 & v2, OSPFv2 (both master & slave), BGP4, ISIS
          L1/L2, RSVP, IGMP over Ethernet
        * PPP LCP & IPCP over Sonet for PPP positive and negative testing
        * Large number of BGP4 (500+ BGP4 neighbors, 1.2+ million
          routes) & OSPFv2 (100 OSPFv2 peers and 12000 LSAs) simulators
          for scaling tests; some scaling work for RIPv1 & v2 and ISIS.
        * Multiple DHCP clients on single Ethernet connected to cable
          modem on other side of CMTS

1997 - 1999:/ Avici Systems, Inc./: Principal Software Engineer

    Designed and developed NUTcracker (Avici's core tool for testing its
    Terabit Switch Router (TSR) including routing protocol conformance
    and performance measurements (e.g., line rate packet forwarding)).
    This tool is: used by software team to allow them to test scaling
    modifications made to Gated, reproduce routing protocol bugs; used
    by SQA team to write all of their automated tests (approx. 1100
    individual tests for ISIS, RIP, OSPF, BGP4, SNMP, ICMP, PPP, MPLS);
    used by SQA to test for line rate forwarding at OC3, OC12, and OC48
    speeds; used by ASIC engineering to send line rate Sonet traffic to
    test the TSR ASICs (including fabric testing); used by Avici
    customers to verify that the TSR is working to their satisfaction
    before they deploy it in their network; used as a sales and demo
    tool so that Avici can demonstrate the TSR's capabilities and
    exploit the weaknesses of competitors (e.g., Cisco).  The is two
    parts of software: one that runs on a UNIX workstation and the other
    on a TSR module running VxWorks.

    My work has two patents in processing: Large Internet Simulator,
    Packet Engine and Packet API.
    Final assignment at Avici included MPLS, RSVP packet
    analysis/monitoring, ATM cell analysis/monitoring
    (segmentation/reassembly).

    *Accomplishments/Responsibilities:*

        * Design, development, documentation, training of the NUTcracker
          project; developed entire product; 32,000 lines of C++ code, 
          15,000 lines of object oriented tcl code
        * Evaluating/(buying if appropriate) other vendors' tools for
          protocol testing and simulation.
        * Recommendations on machines for running tests.
        * Consulting for SQA and software teams for equipment requirements.
        * Consulting for SQA organization, software team, customers in
          how to use NUTcracker for stress testing and creating more
          complex protocol conformance tests.
        * Demos and training to customers, company partners, etc.

    *Applications written:*

        * Packet Monitor and decoder that runs on Ethernet, PPP over
          Sonet, V.35, TCP sockets, UDP sockets, UNIX files.  Decodes
          packets using my packet libraries that have an API for
          allowing a programmer to define any packet data format (packet
          formats I programmed include: Ethernet, PPP, RIP, OSPF, BGP4,
          ISIS, SNMP, ICMP, IP/TCP/UDP and options, etc.  The Packet
          Monitor has a GUI with point and click functionality for
          examining/analyzing network traffic.  Patent work is in
          progress for my Packet engine and PacketAPI.
        * BGP4 Peer router engine: this is a BGP4 implementation
          designed to simulate up to 250 BGP routers on a single
          Ethernet interface and send and receive large amounts of BGP
          route updates (e.g., 500,000 routes); it was used for testing
          the limits of Gated before and after Avici made scaling
          modifications to it.  Patent work is in process for this
          technology.
        * Framework for creating protocol finite state machines (FSM):
          this is a library of functions callable from an interpreted
          scripting language that allows one to easily look at a typical
          RFC and translate the FSM into a working program that can
          simulate the particular protocol; functionality included the
          ability to make asynchronous calls to action functions and
          send/receive packets as the function calls are made.
        * TestManager Graphical Interface: this application allowed a
          test writer to automated their network protocol conformance
          test scripts; the application included a graph of
          pass/fail/abort tests, point/click interface for choosing
          tests, framework for creating, running, and cleaning up after
          tests, etc.
        * Graphical Packet Composer: this application provided a
          point/click interface for creating a packet using my packet
          database; e.g., a user can create a valid BGP4 routing packet
          by blindly clicking on a GUI; users can set fields to
          different values using the GUI and display their packet in a
          graphical way so they can tell if it is composed the way they
          want it to be.
        * High Speed Sonet Packet Generator: this application was
          written on VxWorks and using the Avici TSR ASIC drivers to
          send packets at line rate to a Sonet device under test. 
          Packets were composed using the Graphical Packet Composer and
          downloaded to the TSR module and stored in memory after which
          they were sent repeatedly to the device under test.  Packet
          traffic patterns were designed for full mesh testing,
          multi-port to single port, and single port to port testing. 
          Worked closely with ASIC driver development team to integrate
          any driver enhancements that caused packet generation speed to
          be faster and/or more efficient.

1996 - 1997: /Bay Networks, Inc. /1996 - 1997: Group Manager

    Manage group of five individuals working on network simulation and
    test tools for monitoring networks including performing packet
    captures/decodes/filtering for network troubleshooting, and software
    that generates tests for VLANs for L2/L3 switches, IP forwarding,
    and others.  Act as internal product manager/internal marketer to
    ensure that people know of our tool and use it.

    *Accomplishments:*

      # Managed development of Bay's packet capture utility (PCAP) in
        preparation for it to be released with Bay's Optivity Network
        Management tool suite.
      # Ported core and directed the port of PCAP (with capabilities of
        configuring Bay Networks routers for packet capture and packet
        filtering and live network packet captures) from UNIX to Windows
        NT/95 platform (e.g., Berkeley sockets to Winsock, etc.).
      # Worked with Product Management to distribute Windows version of
        PCAP as Netscape plug-in and standalone utility to existing Bay
        Networks customers, customer support, and network professional
        services.
      # Designed L3 VLAN test engine software (port-based and
        protocols-based VLANs) for automating standard and/or repetitive
        VLAN testing to increase coverage to 100% (my design was
        implemented by my direct  reports).
      # Designing next generation integrated tool suite including user 
        interface and APIs including designing way to make packet encode
        and decoding tools usable from any language (e.g., Java), and
        from any platform suitable for network testing.

1994-1996: /Bay Networks, Inc, /(Senior Software Engr/Group Leader)

    Design/development of network simulation and test management
    software for Bay's routing and switching technology.

    All coding done using OOP programming techniques with C/C++,
    tcl/itcl/tk.  All development was done in a UNIX environment
    (SunOS/Sparc5 and Linux/Intel).

    Exposure to simulation and testing of TCP/IP, IPX, AT, SNMP, OSPF,
    XNS, ARP, ICMP, port-based VLANs, protocol-based VLANs, L2
    switching, L3 switching, network management using SNMP and NMS
    tools, etc.  Wrote implementations of some of these protocols for
    flexible simulation purposes.  Bay software development used my VLAN
    traffic simulator with their router simulator and resulted in
    reducing development time by several months.

    *Accomplishments:*

        * Developed network description language (NDL) used to describe
          network topologies, simulated network nodes running various
          LAN protocols, and how they relate so test management software
          can create the networking simulation (composed of real and
          simulated hardware) as appropriate to allow users to easily
          write test scripts.  Implemented libraries to emulate protocol
          behavior to facilitate large scale testing with minimal
          hardware and computing resources (including writing class
          browser GUI).
        * Designed/developed testing framework for hardware/software
          testers (including developers writing  functional/unit tests)
          so they can write tests for simulated hardware before hardware
          ASIC is available.
        * Framework allows easy test automation complete with logging
          and reports.  This contribution was a significant part in
          making the tools prevalent on the most critical projects in
          the company; developer testimonials indicated that use of this
          technology resulted in reduction in development time by
          several months.
        * Developed/implemented concept of topology independent testing
          and demonstrated its value through  implementation of engine
          for testing core functionality of L2 VLANs including basic L2
          flooding, learning,  end-station moves; this engine formed the
          basis for almost all VLAN regression tests used by software
          group.
        * Developed distributed Unix Domain Socket; allows applications
          (like a socket based router and switch simulator) to be
          distributed across multiple machines. Distributed UNIX Domain
          Sockets can be accessed just like their non-distributed
          counterparts allowing network simulations to be distributed
          with almost no changes.
        * Designed/implemented ability to create multiple instances of
          the test packet tool running on different machines so that
          testers can write more complex test cases (e.g., send traffic
          to a device from more than one direction at a time for high
          performance distributed testing).

      *Other contributions:*
          o Consulting, presentations, and demos to critical groups
            around the company on how to automate manual testing and how
            to increase code coverage and improve quality - customers
            include system test and regression test groups for SQA and
            protocol development groups.
          o Develop/teach monthly courses internally to software
            developers, testers, and external customers on how to use
            our testing tools and how to write tests; provide support to
            users. Well known in my group as an excellent instructor.

1993 - 1994: /Sole Proprietor:/

    Developed educational software for teaching high speed reading and
    memory retention techniques.  Approximately 19,000 lines of C++
    developed as a sideline while working at DEC.

1989 - 1994: /Digital Equipment Corp./: Senior Software Engineer

    Compiler design and development; used BLISS programming language
    (BLISS is a Digital proprietary language and a cross between C and
    assembly).  Compiler design for BASIC, SCAN, and COBOL.  Worked as
    part of a team of 10 individuals.  Ported various portions of COBOL
    compiler, developed/maintained BASIC and SCAN compilers through
    multiple product releases (both field test and final customer ship).

    *Accomplishments:*

        * Fixed numerous defects in both SCAN and BASIC compilers
          reducing defect count from 13 to 0.
        * Fixed bug that was in existence and unsolved for years.
        * Gave product demos at DECUS user symposium for DEC COBOL and
          DEC BASIC

------------------------------------------------------------------------
Text version of this resume
<http://home.comcast.net/%7Edperique/resume.txt> updated July 6, 2007
Microsoft Word version of this resume
<http://home.comcast.net/%7Edperique/resume.doc> updated July 6, 2007
html version of this resume updated Jul 6, 2007








